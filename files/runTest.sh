#!/bin/bash

# D√©finition des variables
BUILD_DIR="build"
LIB_JUNIT="lib/junit-platform-console-standalone-1.9.3.jar:build"
TESTS_DIR="testUnitaire/"
TEST_CLASSES=(
    "livraison.testUnitaire.model.CaseTest"
    "livraison.testUnitaire.model.GrilleTest"
    "livraison.testUnitaire.model.OrchestrateurTest"
    "livraison.testUnitaire.model.PositionTest"
    "livraison.testUnitaire.model.player.PlayerTest"
    "livraison.testUnitaire.model.mcts.MCTSTest"
    "livraison.testUnitaire.model.mcts.RAVETest"
    "livraison.testUnitaire.model.mcts.NoeudTest"
    "livraison.testUnitaire.model.player.PlayerFactoryTest"
    "livraison.testUnitaire.model.player.RandomStrategyTest"
    "livraison.testUnitaire.model.player.MonteCarloStrategyTest"
    "livraison.testUnitaire.controller.ControllerTest"
    
)

# Fonction pour compiler tous les tests
compiler_tests() {
    echo "üîπ Compilation des tests..."
    javac -d "$BUILD_DIR" -cp "$LIB_JUNIT:$BUILD_DIR" $(find "$TESTS_DIR" -name "*.java")
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Compilation r√©ussie !"
    else
        echo "‚ùå √âchec de la compilation. V√©rifiez vos erreurs."
        exit 1
    fi
}

# Fonction pour ex√©cuter un test sp√©cifique
executer_test() {
    local test_class="$1"
    echo "üîπ Ex√©cution du test : $test_class..."
    java -jar "lib/junit-platform-console-standalone-1.9.3.jar" --class-path "$BUILD_DIR" --select-class "$test_class"
}

# Menu principal
while true; do
    echo ""
    echo "=============================="
    echo "  üõ†Ô∏è  MENU D'EX√âCUTION DES TESTS  "
    echo "=============================="
    echo "1Ô∏è‚É£  Ex√©cuter TOUS les tests"
    echo "2Ô∏è‚É£  Ex√©cuter un test sp√©cifique"
    echo "3Ô∏è‚É£  Quitter"
    echo  "‚û°Ô∏è  Choisissez une option : "
    read choix

    case "$choix" in
        1)
            compiler_tests
            echo "üöÄ Ex√©cution de TOUS les tests..."
            java -jar lib/junit-platform-console-standalone-1.9.3.jar --class-path build --scan-class-path
            if [ $? -eq 0 ]; then
                echo ""
                echo "‚úÖ TOUS LES TESTS ONT √âT√â VALID√âS AVEC SUCC√àS ! üéâ"
                echo "üì¶ Tous les modules test√©s sont fonctionnels."
            else
                echo ""
                echo "‚ùå Certains tests ont √©chou√©. Consulte les logs ci-dessus pour corriger les erreurs."
            fi
            ;;
            
        2)
            echo "üìå Tests disponibles :"
            for i in "${!TEST_CLASSES[@]}"; do
                echo "$(($i + 1))) ${TEST_CLASSES[$i]}"
            done
            echo  "‚û°Ô∏è  Entrez le num√©ro du test √† ex√©cuter : "
            read test_num
            
            if [[ "$test_num" -ge 1 && "$test_num" -le "${#TEST_CLASSES[@]}" ]]; then
                compiler_tests
                executer_test "${TEST_CLASSES[$((test_num - 1))]}"
            else
                echo "‚ùå Num√©ro invalide, veuillez r√©essayer."
            fi
            ;;
        q|Q|3)
            echo "üëã Au revoir !"
            exit 0
            ;;
        *)
            echo "‚ùå Option invalide, veuillez r√©essayer."
            ;;
    esac
done